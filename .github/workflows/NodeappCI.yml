name: Node App CI

on:
  pull_request:
   branches: [develop, master]
   paths: 'nodeapp/src/**'
            
env:
  AZURE_WEBAPP_NAME: 'nodeappproject1'                                   # set this to your application's name
  AZURE_WEBAPP_URL: 'https://nodeappproject1.azurewebsites.net'          # set application url
  AZURE_WEBAPP_PACKAGE_PATH: './nodeapp/build'                           # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '16.x'
  
jobs:

  Job1-NodeApp:
    name: Node App
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: nodeapp
 
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
            
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
       
    - name: Install App dependencies
      run: npm ci

    - name: Code analysis
      id: lint
      run: npm run lint
       
    - name: Create Issue (If lint Fail)
      if: ${{ always() &&  steps.lint.outcome == 'failure' ) }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Node App lint Failed
          LINT_REPORT_URL: https://freelearn2000.github.io/Project1/nodeapp/reports/lint-results.html
      with:
        assignees: ${{github.actor}}
        filename: .github/LINT_TEMPLATE.md
          
    - name: Run Unit Tests
      id: test
      run: npm test
      env:
        CI: true
    
   # - name: Run Tests Coverage
   #  id: coverage
   #   if: always()
   #   run: npm run test:coverage
   #  env:
   #     CI: true
        
    - name: Deploy Unit Test Report/Coverage/Lint to Github page
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.SEMANTIC_TOKEN1 }}
        publish_dir: ./nodeapp/reports
        publish_branch: gh-pages
        destination_dir: ./nodeapp
  
    - name: Create Issue (If Test/Coverage fail)
      if: ${{ always() && (steps.test.outcome == 'failure' || steps.coverage.outcome == 'failure' ) }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Node App Tests/Coverage Failed
          TEST_REPORT_URL: https://freelearn2000.github.io/Project1/nodeapp/index.html
          COVERAGE_REPORT_URL: https://freelearn2000.github.io/Project1/nodeapp/coverage/lcov-report/index.html    
      with:
        assignees: ${{github.actor}}
        filename: .github/TESTCOVERAGE_TEMPLATE.md
      
    - name: Build project Node
      id: build
      if: ${{ always() && (steps.test.outcome == 'success' ) }}
      run: npm run build
  
    - name: Create Issue (If Build fail)
      if: ${{ always() && steps.build.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Build failed   
      with:
        assignees: ${{github.actor}}
        filename: .github/BUILD_TEMPLATE.md       
       
    - name: Upload Node Build folder as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Build
        path: ./nodeapp/build
   
    - name: Deploy to Azure WebApp
      id: deploy
      uses: azure/webapps-deploy@v1
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      
    - name: Create Issue (If Deploy fail)
      if: ${{ always() && steps.build.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Deploy failed   
      with:
        assignees: ${{github.actor}}
        
     


       
       
       
    
