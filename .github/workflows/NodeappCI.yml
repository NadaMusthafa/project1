name: Node App CI

on:
  pull_request:
   branches: [develop, master]
   paths: [nodeapp/src/**]
            
env:
  AZURE_APPSERVICE_NAME_STAGING: 'infra-node-sample'                           # set this to your staging application's name
  AZURE_APPSERVICE_NAME_PRODUCTION: 'infra-node-sample-production'             # set this to your production application's name
  AZURE_APPSERVICE_PACKAGE_PATH: './nodeapp/build'                             # set this to the path to your app service project, defaults to the repository root
  NODE_VERSION: '16.x'
  
jobs:

  Job1-NodeApp:
    name: Node App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: nodeapp
 
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
            
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
       
    - name: Install App dependencies
      run: npm ci

    - name: Run Code analysis
      id: lint
      run: npm run lint
       
    - name: Create Issue (If lint Fail)
      if: ${{ always() &&  steps.lint.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Node App lint Failed
          LINT_REPORT_URL: https://freelearn2000.github.io/Project1/nodeapp/reports/lint-results.html
      with:
        assignees: ${{github.actor}}
        filename: .github/LINT_TEMPLATE.md
          
    - name: Run Unit Tests
      id: test
      run: npm test
      env:
        CI: true
    
    - name: Run Tests Coverage
      id: coverage
      if: always()
      run: npm run test:coverage
      env:
        CI: true
        
    - name: Copy Unit Test Report/Coverage/Lint to Github page
      if: ${{ always() && (steps.test.outcome == 'failure' || steps.coverage.outcome == 'failure' || steps.lint.outcome == 'failure' ) }}
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.SEMANTIC_TOKEN1 }}
        publish_dir: ./nodeapp/reports
        publish_branch: gh-pages
        destination_dir: ./nodeapp
  
    - name: Create Issue (If Test/Coverage fail)
      if: ${{ always() && (steps.test.outcome == 'failure' || steps.coverage.outcome == 'failure' ) }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Node App Tests/Coverage Failed
          TEST_REPORT_URL: https://freelearn2000.github.io/Project1/nodeapp/index.html
          COVERAGE_REPORT_URL: https://freelearn2000.github.io/Project1/nodeapp/coverage/lcov-report/index.html    
      with:
        assignees: ${{github.actor}}
        filename: .github/TESTCOVERAGE_TEMPLATE.md
      
    - name: Run Build 
      id: build
      if: ${{ always() && steps.test.outcome == 'success' }}
      run: npm run build
  
    - name: Create Issue (If Build fail)
      if: ${{ always() && steps.build.outcome == 'failure' }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Build failed   
      with:
        assignees: ${{github.actor}}
        filename: .github/BUILD_TEMPLATE.md       
       
 #   - name: Upload Build folder to Artifact
 #     if: github.event_name == 'pull_request' && github.ref == 'refs/heads/master'
#      uses: actions/upload-artifact@v2
  #    with:
       # name: Build
 #       path: ./nodeapp/build   
        
    - name: Login to Azure(using Service Principal Identity) for Staging server
     # if: ${{ always() && (github.ref == 'refs/heads/develop' && steps.build.outcome == 'success') }}
      id: login_staging
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure App Service for Staging server
      id: deploy_staging
      if: ${{ always() && steps.login_staging.outcome == 'success' }}
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_APPSERVICE_NAME_STAGING }}
        package: ${{ env.AZURE_APPSERVICE_PACKAGE_PATH }}
        
    - name: Azure logout
      run: |
        az logout
     
    - name: Deploy to Production Server
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'  && steps.build.outcome == 'success' 
      id: login_production
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PRODUCTION }}
        
    - name: Deploy to Azure App Service for Production server
      id: deploy_production
      if: ${{ always() && steps.login_production.outcome == 'success' }}
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_APPSERVICE_NAME_PRODUCTION }}
        package: ${{ env.AZURE_APPSERVICE_PACKAGE_PATH }}
        
    - name: Azure logout
      run: |
        az logout
     
    - name: Create Issue (If Deploy fail)
      if: ${{ always() && (steps.deploy_staging.outcome == 'failure' || steps.deploy_production.outcome == 'failure') }}
      uses: JasonEtco/create-an-issue@v2
      env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_TOKEN1 }}
          TITLE: Deploy failed   
      with:
        assignees: ${{github.actor}}
        
     


       
       
       
    
